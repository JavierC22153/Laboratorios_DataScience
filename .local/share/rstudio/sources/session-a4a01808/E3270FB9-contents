---
title: "Lab1"
output: html_document
date: "2025-07-20"
author: Gustavo Cruz; Javier Chen
---

```{r paquetes}
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
library(plotly)
library(ggplot2)
library(forecast)
library(tseries)
library(prophet)
library(stats)

```

```{r Exploracion de datos}
# Exploracion de datos con diagnóstico paso a paso

library(readxl)

detectar_header <- function(archivo) {
  preview <- read_excel(archivo, col_names = FALSE, n_max = 15)
  palabras_clave <- c('regular', 'super', 'diesel', 'gas', 'fecha')
  
  for (i in 1:min(10, nrow(preview))) {
    fila <- tolower(as.character(preview[i, ]))
    fila_texto <- paste(fila, collapse = " ")
    if (any(sapply(palabras_clave, function(x) grepl(x, fila_texto)))) {
      return(i - 1)
    }
  }
  return(0)
}

cargar_con_encabezado <- function(archivo) {
  header_row <- detectar_header(archivo)
  df <- read_excel(archivo, skip = header_row)
  names(df) <- tolower(trimws(names(df)))
  return(df)
}

# Función mejorada para parsear fechas
parsear_fecha <- function(fecha_col) {
  if (is.numeric(fecha_col)) {
    return(as.Date(fecha_col, origin = "1899-12-30"))
  }
  
  fecha_col <- as.character(fecha_col)
  
  # Intentar formato ISO (YYYY-MM-DD)
  fechas <- as.Date(fecha_col, format = "%Y-%m-%d")
  if (sum(!is.na(fechas)) > 0) return(fechas)
  
  # Intentar formato DD/MM/YYYY
  fechas <- as.Date(fecha_col, format = "%d/%m/%Y")
  if (sum(!is.na(fechas)) > 0) return(fechas)
  
  # Intentar formato MM/DD/YYYY
  fechas <- as.Date(fecha_col, format = "%m/%d/%Y")
  if (sum(!is.na(fechas)) > 0) return(fechas)
  
  # Intentar formato DD-MM-YYYY
  fechas <- as.Date(fecha_col, format = "%d-%m-%Y")
  if (sum(!is.na(fechas)) > 0) return(fechas)
  
  warning("No se pudo parsear las fechas correctamente")
  return(rep(as.Date(NA), length(fecha_col)))
}

# PASO 1: Verificar que los archivos existen y se pueden cargar
archivos <- list(
  consumo_2024 = "CONSUMO-HIDROCARBUROS-2024-12.xlsx",
  ventas_2025 = "VENTAS-HIDROCARBUROS-2025-05.xlsx",
  import_2024 = "IMPORTACION-HIDROCARBUROS-VOLUMEN-2024-12.xlsx",
  import_2025 = "IMPORTACION-HIDROCARBUROS-VOLUMEN-2025-05.xlsx",
  precios = "Precios-Promedio-Nacionales-Diarios-2025-1.xlsx"
)

cat("=== VERIFICANDO ARCHIVOS ===\n")
for (nombre in names(archivos)) {
  if (file.exists(archivos[[nombre]])) {
    cat("✓", archivos[[nombre]], "existe\n")
  } else {
    cat("✗", archivos[[nombre]], "NO EXISTE\n")
  }
}

# PASO 2: Cargar archivos uno por uno
cat("\n=== CARGANDO ARCHIVOS ===\n")
dfs <- list()

for (nombre in names(archivos)) {
  cat("\nCargando", nombre, "...\n")
  tryCatch({
    df <- cargar_con_encabezado(archivos[[nombre]])
    dfs[[nombre]] <- df
    cat("✓ Cargado:", nrow(df), "filas,", ncol(df), "columnas\n")
    cat("Columnas:", paste(names(df)[1:min(5, ncol(df))], collapse = ", "), 
        if(ncol(df) > 5) "..." else "", "\n")
  }, error = function(e) {
    cat("✗ Error:", e$message, "\n")
    dfs[[nombre]] <<- NULL
  })
}

# PASO 3: Examinar cada DataFrame antes de procesar
cat("\n=== EXAMINANDO DATAFRAMES ===\n")
for (nombre in names(dfs)) {
  if (!is.null(dfs[[nombre]])) {
    df <- dfs[[nombre]]
    cat("\n", toupper(nombre), ":\n")
    cat("Dimensiones:", nrow(df), "x", ncol(df), "\n")
    cat("Columnas:", paste(names(df), collapse = ", "), "\n")
    
    if ("fecha" %in% names(df)) {
      cat("Columna fecha encontrada - Tipo:", class(df$fecha), "\n")
      cat("Primeros valores:", paste(head(df$fecha, 3), collapse = ", "), "\n")
      cat("¿Hay NAs?:", sum(is.na(df$fecha)), "de", length(df$fecha), "\n")
    } else {
      cat("⚠️  Columna 'fecha' NO ENCONTRADA\n")
      cat("Columnas que podrían ser fecha:", 
          paste(names(df)[grepl("fecha|date|time", names(df), ignore.case = TRUE)], collapse = ", "), "\n")
    }
  }
}

# PASO 4: Función preparar_df simplificada con más diagnósticos
preparar_df <- function(df, fuente) {
  cat("\n--- Preparando", fuente, "---\n")
  
  if (is.null(df)) {
    stop("DataFrame es NULL para ", fuente)
  }
  
  if (!"fecha" %in% names(df)) {
    stop("Columna 'fecha' no existe en ", fuente, ". Columnas disponibles: ", paste(names(df), collapse = ", "))
  }
  
  cat("Filas originales:", nrow(df), "\n")
  
  # Intentar parsear fechas
  cat("Intentando parsear fechas...\n")
  fechas_originales <- df$fecha
  fechas_parseadas <- parsear_fecha(fechas_originales)
  
  fechas_validas <- !is.na(fechas_parseadas)
  cat("Fechas válidas:", sum(fechas_validas), "de", length(fechas_parseadas), "\n")
  
  if (sum(fechas_validas) == 0) {
    stop("No se pudieron parsear fechas para ", fuente)
  }
  
  # Filtrar datos válidos
  df_filtrado <- df[fechas_validas, , drop = FALSE]
  fechas_filtradas <- fechas_parseadas[fechas_validas]
  
  # Preparar columnas de combustibles
  cols_diesel <- c('diesel bajo azufre', 'diesel ultra bajo azufre', 'diesel alto azufre')
  for (col in cols_diesel) {
    if (!col %in% names(df_filtrado)) {
      df_filtrado[[col]] <- 0
    }
    df_filtrado[[col]][is.na(df_filtrado[[col]])] <- 0
  }
  
  # Crear DataFrame resultado
  resultado <- data.frame(
    fecha = fechas_filtradas,
    gasolina_regular = ifelse('gasolina regular' %in% names(df_filtrado), 
                             as.numeric(df_filtrado[['gasolina regular']]), 0),
    gasolina_superior = ifelse('gasolina superior' %in% names(df_filtrado), 
                              as.numeric(df_filtrado[['gasolina superior']]), 0),
    gas_licuado = ifelse('gas licuado de petróleo' %in% names(df_filtrado), 
                        as.numeric(df_filtrado[['gas licuado de petróleo']]), 0),
    diesel = as.numeric(df_filtrado[['diesel bajo azufre']]) + 
             as.numeric(df_filtrado[['diesel ultra bajo azufre']]) + 
             as.numeric(df_filtrado[['diesel alto azufre']]),
    fuente = fuente,
    stringsAsFactors = FALSE
  )
  
  # Reemplazar NAs con 0
  resultado[is.na(resultado)] <- 0
  
  cat("DataFrame final:", nrow(resultado), "filas\n")
  return(resultado)
}

# PASO 5: Procesar datos con inicialización explícita
cat("\n=== PROCESANDO DATOS ===\n")

# Inicializar variables
consumo_total <- NULL
importacion_total <- NULL
precios <- NULL

# Procesar consumo
if (!is.null(dfs$consumo_2024) && !is.null(dfs$ventas_2025)) {
  cat("\nProcesando datos de consumo...\n")
  tryCatch({
    df_consumo_2024 <- preparar_df(dfs$consumo_2024, "consumo")
    df_ventas_2025 <- preparar_df(dfs$ventas_2025, "ventas")
    consumo_total <- rbind(df_consumo_2024, df_ventas_2025)
    cat("✓ Consumo total:", nrow(consumo_total), "filas\n")
  }, error = function(e) {
    cat("✗ Error en consumo:", e$message, "\n")
    consumo_total <<- data.frame()  # DataFrame vacío en lugar de NULL
  })
} else {
  cat("⚠️  No se pueden procesar datos de consumo (archivos faltantes)\n")
  consumo_total <- data.frame()
}

# Procesar importación
if (!is.null(dfs$import_2024) && !is.null(dfs$import_2025)) {
  cat("\nProcesando datos de importación...\n")
  tryCatch({
    df_import_2024 <- preparar_df(dfs$import_2024, "importacion")
    df_import_2025 <- preparar_df(dfs$import_2025, "importacion")
    importacion_total <- rbind(df_import_2024, df_import_2025)
    cat("✓ Importación total:", nrow(importacion_total), "filas\n")
  }, error = function(e) {
    cat("✗ Error en importación:", e$message, "\n")
    importacion_total <<- data.frame()
  })
} else {
  cat("⚠️  No se pueden procesar datos de importación (archivos faltantes)\n")
  importacion_total <- data.frame()
}

# Procesar precios
if (!is.null(dfs$precios)) {
  cat("\nProcesando precios...\n")
  tryCatch({
    precios <- dfs$precios
    if ("fecha" %in% names(precios)) {
      precios$fecha <- parsear_fecha(precios$fecha)
      precios <- precios[!is.na(precios$fecha), ]
      cat("✓ Precios:", nrow(precios), "filas\n")
    } else {
      cat("⚠️  Columna fecha no encontrada en precios\n")
      precios <- data.frame()
    }
  }, error = function(e) {
    cat("✗ Error en precios:", e$message, "\n")
    precios <<- data.frame()
  })
} else {
  cat("⚠️  Archivo de precios no disponible\n")
  precios <- data.frame()
}

# RESUMEN FINAL
cat("\n=== RESUMEN FINAL ===\n")
cat("Consumo:", ifelse(is.null(consumo_total), "NULL", nrow(consumo_total)), "filas\n")
cat("Importación:", ifelse(is.null(importacion_total), "NULL", nrow(importacion_total)), "filas\n")
cat("Precios:", ifelse(is.null(precios), "NULL", nrow(precios)), "filas\n")

cat("\nDatos cargados correctamente\n")
```
